module MidSizeGraph exposing (..)

import Graph as G
import Html
import Render as R
import Dagre.Attributes as DA
import Graph.DOT

graph : G.Graph Int ()
graph =
    G.fromNodesAndEdges
        ( List.map 
            (\nodeId ->
                G.Node nodeId nodeId
            )
            [ -104, -43, 1, 2, 4, 5, 6, 8, 38, 39, 41, 46, 47, 48, 49, 60, 61, 62, 63, 78, 99, 100, 101, 102, 103, 105, 106, 107, 109, 114, 116, 117, 118, 119, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 162, 163, 165, 169, 184, 187, 189, 190, 191, 192, 194, 195, 196, 197, 210, 211]       
         )
        
        ( List.map 
            (\(from,  to) ->
                G.Edge from to ()
            )
            [(1,165), (2,-43) ,  (2,4) ,  (2,5) ,  (2,38) ,  (2,60) ,  (2,62) , (2,119) , (2,152) , (2,156) , (2,194) , (4,8) , (4,133) , (5,6) , (5,39) , (5,41) , (5,49) , (5,116) , (6,191) , (38,136) , (41,139) , (47,46) , (48,47) , (48,118) , (49,150) , (49,151) , (49,189) , (60,61) , (62,63) , (62,114) , (62,140) , (78,46) , (99,100) , (99,101) , (100,102) , (100,103) , (100,131) , (101,105) , (101,126) , (101,144) , (102,107) , (102,132) , (103,-104) , (105,106) , (105,109) , (116,117) , (116,125) , (116,143) , (116,192) , (118,78) , (119,48) , (119,123) , (123,124) , (126,128) , (131,129) , (131,130) , (131,135) , (132,210) , (140,142) , (142,141) , (142,158) , (144,145) , (144,146) , (144,147) , (144,148) , (150,149) , (151,149) , (152,137) , (156,162) , (163,2) , (163,165) , (163,187) , (165,169) , (169,184) , (187,49) , (189,190) , (194,195) , (194,196) , (194,197) , (195,211) , (196,211) , (197,211)]        
        )

graph2 : G.Graph Int ()
graph2 =
    G.fromNodesAndEdges
        ( List.map 
            (\nodeId ->
                G.Node nodeId nodeId
            )
            [-129 , -104 , 1 , 2 , 4 , 5 , 6 , 8 , 38 , 39 , 41 , 43 , 46 , 47 , 48 , 49 , 60 , 61 , 62 , 63 , 78 , 99 , 100 , 101 , 102 , 103 , 105 , 106 , 107 , 109 , 114 , 116 , 117 , 118 , 119 , 123 , 124 , 125 , 126 , 128 , 131 , 132 , 133 , 136 , 137 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 149 , 150 , 151 , 152 , 156 , 158 , 159 , 162 , 163 , 165 , 169 , 172 , 184 , 187 , 189 , 190 , 191 , 192 , 194 , 195 , 196 , 197 , 199 , 200 , 210 , 225 , 226 , 227 , 228 , 230 , 233 , 234 , 235 , 236 , 237 , 238 , 239 , 431 , 432 , 435 , 436 , 437]    
        )
        ( List.map 
            (\(from,  to) ->
                G.Edge from to ()
            )
            [(2 , 4 ) , ( 2 , 5 ) , ( 2 , 38 ) , ( 2 , 43 ) , ( 2 , 62 ) , ( 2 , 119 ) , ( 2 , 152 ) , ( 2 , 156 ) , ( 2 , 172 ) , ( 2 , 194 ) , ( 2 , 199 ) , ( 2 , 200 ) , ( 2 , 228 ) , ( 2 , 239 ) , ( 4 , 8 ) , ( 4 , 133 ) , ( 5 , 6 ) , ( 5 , 39 ) , ( 5 , 41 ) , ( 5 , 49 ) , ( 5 , 116 ) , ( 5 , 159 ) , ( 5 , 230 ) , ( 6 , 191 ) , ( 6 , 234 ) , ( 6 , 431 ) , ( 38 , 136 ) , ( 41 , 139 ) , ( 47 , 46 ) , ( 48 , 47 ) , ( 48 , 118 ) , ( 49 , 150 ) , ( 49 , 151 ) , ( 49 , 189 ) , ( 49 , 225 ) , ( 49 , 235 ) , ( 60 , 61 ) , ( 60 , 226 ) , ( 60 , 227 ) , ( 62 , 63 ) , ( 62 , 114 ) , ( 62 , 140 ) , ( 78 , 46 ) , ( 99 , 100 ) , ( 99 , 101 ) , ( 100 , 102 ) , ( 100 , 103 ) , ( 100 , 131 ) , ( 101 , 105 ) , ( 101 , 126 ) , ( 101 , 144 ) , ( 102 , 107 ) , ( 102 , 132 ) , ( 103 , -104 ) , ( 105 , 106 ) , ( 105 , 109 ) , ( 109 , 142 ) , ( 116 , 117 ) , ( 116 , 125 ) , ( 116 , 143 ) , ( 116 , 192 ) , ( 118 , 78 ) , ( 119 , 48 ) , ( 119 , 123 ) , ( 123 , 124 ) , ( 126 , 128 ) , ( 131 , -129 ) , ( 132 , 210 ) , ( 140 , 142 ) , ( 142 , 141 ) , ( 142 , 158 ) , ( 144 , 145 ) , ( 144 , 146 ) , ( 144 , 147 ) , ( 144 , 148 ) , ( 150 , 149 ) , ( 151 , 149 ) , ( 152 , 137 ) , ( 152 , 238 ) , ( 156 , 162 ) , ( 156 , 238 ) , ( 159 , 236 ) , ( 159 , 237 ) , ( 163 , 2 ) , ( 163 , 165 ) , ( 163 , 187 ) , ( 165 , 169 ) , ( 169 , 184 ) , ( 187 , 49 ) , ( 189 , 190 ) , ( 194 , 195 ) , ( 194 , 196 ) , ( 194 , 197 ) , ( 228 , 60 ) , ( 228 , 435 ) , ( 228 , 436 ) , ( 230 , 233 ) , ( 239 , 238 ) , ( 431 , 432 ) , ( 436 , 437)]
        )

main : Html.Html msg
main =
    Html.div []
        [
    R.draw
        [ DA.rankDir DA.LR
        , DA.nodeSep 10
        ]
        [ R.style "height: 100vh;"
        ]
        graph2
        , Html.h3 [] [ Html.text "DOT String" ]
        , Html.p [] [ Html.text <| Graph.DOT.output (always Nothing) (always Nothing) graph2 ]
        ]